from flask import Flask
from google.cloud import bigtable
from google.cloud.bigtable import row_filters
import os

app = Flask(__name__)
@app.route('/', methods=['GET'])
def hello_cloud():
  return 'hello'

project_id = "cs-415-450800"
instance_id = "ev-bigtable"
table_id = "ev-population"

client = bigtable.Client(project=project_id, admin=True)
instance = client.instance(instance_id)
table = instance.table(table_id)



@app.route('/rows', methods=['GET'])
def get_total_rows():
    # returns the total number of entries in Bigtable
    try:
        rows = table.read_rows()
        count = sum(1 for _ in rows)
        return str(count)
    except Exception as e:
        return "/rows failed with error: " + str(e)
    


@app.route('/Best-BMW', methods=['GET'])
def get_best_bmw():
    # Find the count of BMW EVs with an electric range > 100 miles
    try:
        count = 0
        rows = table.read_rows()
        for row in rows:
            make = row.cells["ev_info"].get("make".encode())[0]
            ev_range = row.cells["ev_info"].get("electric range".encode())[0].value.decode('utf-8')



            if make and ev_range and ev_range != "":
                make = make.value.decode('utf-8')
                # ev_range = float(ev_range.value.decode('utf-8'))
                ev_range = float(ev_range)

                # print(make)
                # print(ev_range)

                if make == "BMW" and ev_range > 100:
                    count += 1
            # print("count:", count)

        # count = 6317
        return str(count)
    except Exception as e:
        return "/Best-BMW failed with error: " + str(e)

@app.route('/tesla-owners', methods=['GET'])
def get_tesla_seattle():
    # Retrieve the count of all Tesla vehicles registered in Seattle
    try:
        count = 0
        rows = table.read_rows()
        for row in rows:
            make = row.cells["ev_info"].get("make".encode())[0]
            city = row.cells["ev_info"].get("city".encode())[0]



            if make and city:
                make = make.value.decode('utf-8')
                # ev_range = float(ev_range.value.decode('utf-8'))
                city = city.value.decode('utf-8')

                # print(make)
                # print(ev_range)

                if make == "TESLA" and city == "Seattle":
                    count += 1
            # print("count:", count)

        # count = 6317
        return str(count)
        # # count = 13473
        # return str(count)
    except Exception as e:
        return "/tesla-owners failed with error: " + str(e)

@app.route('/update', methods=['GET'])
def update_range():
    # Update the electric range of the vehicle with DOL Vehicle ID 257246118 to 200 miles. 
    try:
        # row_key = '257246118'
        row_key = '257246118'.encode("utf-8")
        row = table.row(row_key)
        
        if not row:
            return "row not found"
        
        row.set_cell('ev_info', 'electric range', '200'.encode("utf-8") )
        row.commit()
        
        return "Success"
    except Exception as e:
        return "/update failed with error: " + str(e)

@app.route('/delete', methods=['GET'])
def delete_old_records():
    # Delete all records where the model year is less than 2014 and retrieve the count of remaining records
    try:
        chain = row_filters.RowFilterChain(filters=[
            row_filters.FamilyNameRegexFilter("ev_info"),
            row_filters.ColumnQualifierRegexFilter("model year"),
            row_filters.ValueRangeFilter(
                end_value="2014".encode("utf-8"),  # Bytes comparison
                inclusive_end=False               # Values < 2014
            )
        ])
        rows_to_delete = list(table.read_rows(filter_=chain))
        
        for row in rows_to_delete:
            row = table.row(row.row_key)
            row.delete()
            row.commit()
        
        remaining_count = sum(1 for _ in table.read_rows())
        return str(remaining_count)


    except Exception as e:
        return "/delete failed with error: " + str(e)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
